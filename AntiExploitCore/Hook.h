#pragma once

#include <set>
#include <unordered_map>
#include <map>
#include "framework.h"
#include <TlHelp32.h>

#pragma warning(disable : 5208)

constexpr DWORD HOOK_TRAMPOLINE_SIZE = 0x10000;
constexpr DWORD TRAMPOLINE_SIZE = 0x10;
constexpr DWORD TRAMPOLINE_MAX_ENTRIES = (HOOK_TRAMPOLINE_SIZE / TRAMPOLINE_SIZE);
//#define MAX_ITERATIONS_WAIT_RX	24

typedef struct
{
	typedef struct
	{
		PVOID pfnToDetour;
		PVOID pfnDetourTarget;
		PVOID* ppfnOriginalFunction;
	} hookData;

	std::vector<hookData> hooks;

	void clearHooks()
	{
		hooks.clear();
	}
} threadHooks;

static std::unordered_map<DWORD, threadHooks*> pendingHooks; // ThreadID to threadHooks 
static std::unordered_map<DWORD, threadHooks*> pendingRemoveHooks; // ThreadID to threadHooks
static PVOID hookStubPtr = NULL;
static std::set<size_t> setStubOffsTaken;

void InitHookStub();
PVOID GetFreeStub();
void ReleaseStub(PVOID stubPtr);
BOOL ChangeProtectionRWX(PVOID ptr);
BOOL PrepareForExecute(PVOID stubPtr);
BOOL SetPagePermisson(PVOID stubPtr, DWORD dwNewProtect, DWORD* pdwOldProtect);
BOOL CheckWriteable(PVOID pvStub);
BOOL SuspendThreads();
BOOL ResumeThreads();
size_t InstructionBoundary(PVOID pv);
BOOL HookWrite(PVOID pvStub, threadHooks::hookData);
BOOL HookRemove(threadHooks::hookData);

LONG __stdcall HookTransactionBegin();
LONG __stdcall HookTransactionCommit();

// LONG WINAPI DetourUpdateThread(HANDLE hThread);

LONG __stdcall HookAttach(PVOID* ppPointer, PVOID pDetour);
LONG __stdcall HookDetach(PVOID* ppPointer, PVOID pDetour);


typedef BOOLEAN(NTAPI* FN_RTLDISPATCHEXCEPTION)(
	__in PEXCEPTION_RECORD  ExceptionRecord,
	__in PCONTEXT           Context
	);

FN_RTLDISPATCHEXCEPTION GetRtlDispatchException();

ULONG GetInstructionLength(void*);