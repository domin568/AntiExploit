#pragma once

#include "framework.h"
#include "Hook.h"
#include "structs.h"
#include "Stack.h"
#include <psapi.h>
#include <vector>

static std::vector <MODULE_INFO> currentLoadedModules;

BOOL InjectAntiExploit();
BOOL DisableAntiExploit();
std::vector <MODULE_INFO> GetLoadedModules();
BOOL IsAddrInLoadedModules(LPVOID addr);
BOOL GetSEHHandlerAndNext(DWORD dwNthEntry, LPVOID* plpvHandler, LPVOID* plpvPrev);
BOOL IsBadPtr(LPVOID lpvPtr, DWORD cbPtr);
BOOL IsSEHExploit(LPVOID SEHHandler);
BOOL IsMemMappedOrModule(LPVOID addr);
BOOL IsJmpOrCallEsp(LPVOID lpvAddress);

static FN_LOADLIBRARYA				Original_LoadLibraryA = NULL;
static FN_LOADLIBRARYW				Original_LoadLibraryW = NULL;
static FN_LOADLIBRARYEXA			Original_LoadLibraryExA = NULL;
static FN_LOADLIBRARYEXW			Original_LoadLibraryExW = NULL;
static FN_LDRLOADDLL				Original_LdrLoadDll = NULL;
static FN_FREELIBRARY				Original_FreeLibrary = NULL;
static FN_FREELIBRARYANDEXITTHREAD  Original_FreeLibraryAndExitThread = NULL;
static FN_CREATEPROCESSINTERNALA	Original_CreateProcessInternalA = NULL;
static FN_CREATEPROCESSINTERNALW	Original_CreateProcessInternalW = NULL;
static FN_GETPROCADDRESS			Original_GetProcAddress = NULL;
static FN_GETMODULEHANDLEA			Original_GetModuleHandleA = NULL;
static FN_GETMODULEHANDLEW			Original_GetModuleHandleW = NULL;
static FN_CREATEPROCESSA			Original_CreateProcessA = NULL;
static FN_CREATEPROCESSW			Original_CreateProcessW = NULL;
static FN_VIRTUALPROTECT			Original_VirtualProtect = NULL;
static FN_VIRTUALPROTECTEX			Original_VirtualProtectEx = NULL;
static FN_NTPROTECTVIRTUALMEMORY	Original_NtProtectVirtualMemory = NULL;
static FN_VIRTUALALLOC				Original_VirtualAlloc = NULL;
static FN_VIRTUALALLOCEX			Original_VirtualAllocEx = NULL;
static FN_NTALLOCATEVIRTUALMEMORY	Original_NtAllocateVirtualMemory = NULL;
static FN_SETPROCESSDEPPOLICY		Original_SetProcessDEPPolicy = NULL;
static FN_NTSETINFORMATIONPROCESS	Original_NtSetInformationProcess = NULL;
static FN_CREATETHREAD				Original_CreateThread = NULL;
static FN_CREATEREMOTETHREAD		Original_CreateRemoteThread = NULL;
static FN_NTCREATETHREAD			Original_NtCreateThread = NULL;
static FN_NTCREATETHREADEX			Original_NtCreateThreadEx = NULL;
static FN_EXITPROCESS				Original_ExitProcess = NULL;
static FN_EXITTHREAD				Original_ExitThread = NULL;
static FN_NTTERMINATETHREAD			Original_NtTerminateThread = NULL;
static FN_RTLDISPATCHEXCEPTION      Original_RtlDispatchException = NULL;

BOOLEAN __stdcall My_RtlDispatchException(
	__in PEXCEPTION_RECORD  ExceptionRecord,
	__in PCONTEXT           Context
);

HMODULE __stdcall My_LoadLibraryA(
	__in	char* lpFileName
);

HMODULE __stdcall My_LoadLibraryW(
	__in	LPWSTR lpFileName
);

HMODULE __stdcall My_LoadLibraryExA(
	__in        char* lpFileName,
	__reserved  HANDLE hFile,
	__in        DWORD dwFlags
);

HMODULE __stdcall My_LoadLibraryExW(
	__in        LPWSTR lpFileName,
	__reserved  HANDLE hFile,
	__in        DWORD dwFlags
);

LONG __stdcall My_LdrLoadDll(
	__in PWCHAR				PathToFile,
	__in ULONG				Flags,
	__in PUNICODE_STRING	ModuleFileName,
	__out PHANDLE			ModuleHandle
);

BOOL WINAPI My_FreeLibrary(
	__in  HMODULE hModule
);

VOID WINAPI My_FreeLibraryAndExitThread(
	__in  HMODULE hModule,
	__in  DWORD dwExitCode
);

DWORD WINAPI My_CreateProcessInternalA(
	__in HANDLE	hToken,
	__in_opt	char* lpApplicationName,
	__inout_opt	char* lpCommandLine,
	__in_opt	LPSECURITY_ATTRIBUTES lpProcessAttributes,
	__in_opt	LPSECURITY_ATTRIBUTES lpThreadAttributes,
	__in		BOOL bInheritHandles,
	__in		DWORD dwCreationFlags,
	__in_opt	LPVOID lpEnvironment,
	__in_opt	char* lpCurrentDirectory,
	__in		LPSTARTUPINFO lpStartupInfo,
	__out		LPPROCESS_INFORMATION lpProcessInformation,
	__in		PHANDLE hNewToken
);

DWORD WINAPI My_CreateProcessInternalW(
	__in HANDLE	hToken,
	__in_opt	LPWSTR lpApplicationName,
	__inout_opt	LPWSTR lpCommandLine,
	__in_opt	LPSECURITY_ATTRIBUTES lpProcessAttributes,
	__in_opt	LPSECURITY_ATTRIBUTES lpThreadAttributes,

	__in		BOOL bInheritHandles,
	__in		DWORD dwCreationFlags,
	__in_opt	LPVOID lpEnvironment,
	__in_opt	LPWSTR lpCurrentDirectory,
	__in		LPSTARTUPINFO lpStartupInfo,
	__out		LPPROCESS_INFORMATION lpProcessInformation,
	__in		PHANDLE hNewToken
);

BOOL WINAPI My_CreateProcessA(
	__in_opt     char* lpApplicationName,
	__inout_opt  char* lpCommandLine,
	__in_opt     LPSECURITY_ATTRIBUTES lpProcessAttributes,
	__in_opt     LPSECURITY_ATTRIBUTES lpThreadAttributes,
	__in         BOOL bInheritHandles,
	__in         DWORD dwCreationFlags,
	__in_opt     LPVOID lpEnvironment,
	__in_opt     char* lpCurrentDirectory,
	__in         LPSTARTUPINFO lpStartupInfo,
	__out        LPPROCESS_INFORMATION lpProcessInformation
);

BOOL WINAPI My_CreateProcessW(
	__in_opt     LPWSTR lpApplicationName,
	__inout_opt  LPWSTR lpCommandLine,
	__in_opt     LPSECURITY_ATTRIBUTES lpProcessAttributes,
	__in_opt     LPSECURITY_ATTRIBUTES lpThreadAttributes,
	__in         BOOL bInheritHandles,
	__in         DWORD dwCreationFlags,
	__in_opt     LPVOID lpEnvironment,
	__in_opt     LPWSTR lpCurrentDirectory,
	__in         LPSTARTUPINFO lpStartupInfo,
	__out        LPPROCESS_INFORMATION lpProcessInformation
);

FARPROC WINAPI My_GetProcAddress(
	__in	HMODULE hModule,
	__in	LPCSTR lpProcName
);

HMODULE WINAPI My_GetModuleHandleA(
	__in_opt	char* lpModuleName
);