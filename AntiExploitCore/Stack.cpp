#include "Stack.h"
#include "structs.h"

NTSTATUS(WINAPI* pfnNtQueryInformationThread)(
	__in       HANDLE ThreadHandle,
	__in       /*THREADINFOCLASS*/ DWORD ThreadInformationClass,
	__inout    PVOID ThreadInformation,
	__in       ULONG ThreadInformationLength,
	__out_opt  PULONG ReturnLength
	) = NULL;

NTSTATUS(NTAPI* pfnNtReadVirtualMemory)(
	__in       HANDLE ProcessHandle,
	__in       PVOID  BaseAddress,
	__out      PVOID  Buffer,
	__in       ULONG  NumberOfBytesToRead,
	__out_opt  PULONG NumberOfBytesReaded
	) = NULL;

HMODULE hmNtdll = NULL;

BOOL GetStackRegionThread (HANDLE hThread, PVOID* pvStackBase, PVOID* pvStackTop)
{
	BOOL bSuccess = FALSE;
	THREAD_BASIC_INFORMATION tbi = { 0 };
	NT_TIB tib;
	HANDLE hDuplicate = NULL;

	if (!DuplicateHandle(GetCurrentProcess(), hThread, GetCurrentProcess(), &hDuplicate, THREAD_QUERY_INFORMATION, FALSE, 0))
	{
		if (hDuplicate)
			CloseHandle(hDuplicate);
		return bSuccess;
	}
	if (!pfnNtQueryInformationThread)
	{
		if (!hmNtdll)
			hmNtdll = GetModuleHandle(L"ntdll.dll");

		if (!hmNtdll)
		{
			if (hDuplicate)
				CloseHandle(hDuplicate);
			return bSuccess;
		}

		pfnNtQueryInformationThread = (NTSTATUS(WINAPI*)(__in HANDLE, __in DWORD, __inout PVOID, __in ULONG, __out_opt PULONG))GetProcAddress(hmNtdll, "NtQueryInformationThread");
		if (!pfnNtQueryInformationThread)
		{
			if (hDuplicate)
				CloseHandle(hDuplicate);
			return bSuccess;
		}
	}

	DWORD dwReturnLength = 0;

	NTSTATUS status = pfnNtQueryInformationThread(hDuplicate, 0, &tbi, sizeof(tbi), &dwReturnLength);
	if (dwReturnLength <= 0 && status)
	{
		if (hDuplicate)
			CloseHandle(hDuplicate);
		return bSuccess;
	}

	if (!pfnNtReadVirtualMemory)
	{
		if (!hmNtdll)
			hmNtdll = GetModuleHandle(L"ntdll.dll");

		if (!hmNtdll)
		{
			if (hDuplicate)
				CloseHandle(hDuplicate);
			return bSuccess;
		}

		pfnNtReadVirtualMemory = (NTSTATUS(WINAPI*)(__in HANDLE, __in PVOID, __out PVOID, __in ULONG, __out_opt PULONG))GetProcAddress(hmNtdll, "NtReadVirtualMemory");
		if (!pfnNtReadVirtualMemory)
		{
			if (hDuplicate)
				CloseHandle(hDuplicate);
			return bSuccess;
		}
	}

	status = pfnNtReadVirtualMemory(GetCurrentProcess(), tbi.TebBaseAddress, &tib, sizeof(tib), &dwReturnLength);
	if (status && dwReturnLength <=0)
	{
		if (hDuplicate)
			CloseHandle(hDuplicate);
		return bSuccess;
	}

	if (pvStackBase)
		*pvStackBase = tib.StackBase;

	if (pvStackTop)
		*pvStackTop = tib.StackLimit;

	bSuccess = TRUE;

	return bSuccess;
}