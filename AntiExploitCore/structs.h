#pragma once
#include "framework.h"
#include <string>
// INTERNAL 

struct PROCESS_INFO
{
    DWORD pid;
    std::wstring processName;
    ULONG aslr;
    ULONG dep;
    ULONG modules;
    std::wstring safeSEH;
    std::wstring stackCanary;
    BOOLEAN antiExploit;

	bool operator<(const PROCESS_INFO& a)
	{
		return pid < a.pid;
	}
	bool operator==(const PROCESS_INFO& a) const
	{
		return pid == a.pid;
	}
};
typedef struct _MODULE_INFO
{
	HMODULE baseAddr;
	DWORD size;
} MODULE_INFO;

typedef struct
{
    HWND hlist;
    int  iSubItem;
    BOOL bSortAscending;
}t_data;

// EXTERNAL (UNDOCUMENTED MS WINDOWS)

enum PROCESSINFOCLASS
{
	ProcessBasicInformation = 0x00,
	ProcessQuotaLimits = 0x01,
	ProcessIoCounters = 0x02,
	ProcessVmCounters = 0x03,
	ProcessTimes = 0x04,
	ProcessBasePriority = 0x05,
	ProcessRaisePriority = 0x06,
	ProcessDebugPort = 0x07,
	ProcessExceptionPort = 0x08,
	ProcessAccessToken = 0x09,
	ProcessLdtInformation = 0x0A,
	ProcessLdtSize = 0x0B,
	ProcessDefaultHardErrorMode = 0x0C,
	ProcessIoPortHandlers = 0x0D,
	ProcessPooledUsageAndLimits = 0x0E,
	ProcessWorkingSetWatch = 0x0F,
	ProcessUserModeIOPL = 0x10,
	ProcessEnableAlignmentFaultFixup = 0x11,
	ProcessPriorityClass = 0x12,
	ProcessWx86Information = 0x13,
	ProcessHandleCount = 0x14,
	ProcessAffinityMask = 0x15,
	ProcessPriorityBoost = 0x16,
	ProcessDeviceMap = 0x17,
	ProcessSessionInformation = 0x18,
	ProcessForegroundInformation = 0x19,
	ProcessWow64Information = 0x1A,
	ProcessImageFileName = 0x1B,
	ProcessLUIDDeviceMapsEnabled = 0x1C,
	ProcessBreakOnTermination = 0x1D,
	ProcessDebugObjectHandle = 0x1E,
	ProcessDebugFlags = 0x1F,
	ProcessHandleTracing = 0x20,
	ProcessIoPriority = 0x21,
	ProcessExecuteFlags = 0x22,
	ProcessResourceManagement = 0x23,
	ProcessCookie = 0x24,
	ProcessImageInformation = 0x25,
	ProcessCycleTime = 0x26,
	ProcessPagePriority = 0x27,
	ProcessInstrumentationCallback = 0x28,
	ProcessThreadStackAllocation = 0x29,
	ProcessWorkingSetWatchEx = 0x2A,
	ProcessImageFileNameWin32 = 0x2B,
	ProcessImageFileMapping = 0x2C,
	ProcessAffinityUpdateMode = 0x2D,
	ProcessMemoryAllocationMode = 0x2E,
	ProcessGroupInformation = 0x2F,
	ProcessTokenVirtualizationEnabled = 0x30,
	ProcessConsoleHostProcess = 0x31,
	ProcessWindowInformation = 0x32,
	ProcessHandleInformation = 0x33,
	ProcessMitigationPolicy = 0x34,
	ProcessDynamicFunctionTableInformation = 0x35,
	ProcessHandleCheckingMode = 0x36,
	ProcessKeepAliveCount = 0x37,
	ProcessRevokeFileHandles = 0x38,
	ProcessWorkingSetControl = 0x39,
	ProcessHandleTable = 0x3A,
	ProcessCheckStackExtentsMode = 0x3B,
	ProcessCommandLineInformation = 0x3C,
	ProcessProtectionInformation = 0x3D,
	ProcessMemoryExhaustion = 0x3E,
	ProcessFaultInformation = 0x3F,
	ProcessTelemetryIdInformation = 0x40,
	ProcessCommitReleaseInformation = 0x41,
	ProcessDefaultCpuSetsInformation = 0x42,
	ProcessAllowedCpuSetsInformation = 0x43,
	ProcessSubsystemProcess = 0x44,
	ProcessJobMemoryInformation = 0x45,
	ProcessInPrivate = 0x46,
	ProcessRaiseUMExceptionOnInvalidHandleClose = 0x47,
	ProcessIumChallengeResponse = 0x48,
	ProcessChildProcessInformation = 0x49,
	ProcessHighGraphicsPriorityInformation = 0x4A,
	ProcessSubsystemInformation = 0x4B,
	ProcessEnergyValues = 0x4C,
	ProcessActivityThrottleState = 0x4D,
	ProcessActivityThrottlePolicy = 0x4E,
	ProcessWin32kSyscallFilterInformation = 0x4F,
	ProcessDisableSystemAllowedCpuSets = 0x50,
	ProcessWakeInformation = 0x51,
	ProcessEnergyTrackingState = 0x52,
	ProcessManageWritesToExecutableMemory = 0x53,
	ProcessCaptureTrustletLiveDump = 0x54,
	ProcessTelemetryCoverage = 0x55,
	ProcessEnclaveInformation = 0x56,
	ProcessEnableReadWriteVmLogging = 0x57,
	ProcessUptimeInformation = 0x58,
	ProcessImageSection = 0x59,
	ProcessDebugAuthInformation = 0x5A,
	ProcessSystemResourceManagement = 0x5B,
	ProcessSequenceNumber = 0x5C,
	ProcessLoaderDetour = 0x5D,
	ProcessSecurityDomainInformation = 0x5E,
	ProcessCombineSecurityDomainsInformation = 0x5F,
	ProcessEnableLogging = 0x60,
	ProcessLeapSecondInformation = 0x61,
	ProcessFiberShadowStackAllocation = 0x62,
	ProcessFreeFiberShadowStackAllocation = 0x63,
	MaxProcessInfoClass = 0x64
};

typedef struct _EXCEPTION_REGISTRATION 
{
	struct _EXCEPTION_REGISTRATION* Prev;
	LPVOID Handler;
} EXCEPTION_REGISTRATION, * PEXCEPTION_REGISTRATION;

/*
typedef struct _CLIENT_ID
{
	HANDLE UniqueProcess;
	HANDLE UniqueThread;
} CLIENT_ID, * PCLIENT_ID;
*/
typedef struct _THREAD_BASIC_INFORMATION 
{
	LONG                ExitStatus;
	PVOID                   TebBaseAddress;
	HANDLE					UniqueProcess;
	HANDLE					UniqueThread;
	KAFFINITY               AffinityMask;
	LONG               Priority;
	LONG               BasePriority;
} THREAD_BASIC_INFORMATION, * PTHREAD_BASIC_INFORMATION;

typedef struct _SECTION_IMAGE_INFORMATION
{
PVOID TransferAddress;
ULONG ZeroBits;
SIZE_T MaximumStackSize;
SIZE_T CommittedStackSize;
ULONG SubSystemType;
union
{
    struct
    {
        USHORT SubSystemMinorVersion;
        USHORT SubSystemMajorVersion;
    };
    ULONG SubSystemVersion;
};
ULONG GpValue;
USHORT ImageCharacteristics;
USHORT DllCharacteristics;
USHORT Machine;
BOOLEAN ImageContainsCode;
union
{
    UCHAR ImageFlags;
    struct
    {
        UCHAR ComPlusNativeReady : 1;
        UCHAR ComPlusILOnly : 1;
        UCHAR ImageDynamicallyRelocated : 1;
        UCHAR ImageMappedFlat : 1;
        UCHAR BaseBelow4gb : 1;
        UCHAR Reserved : 3;
    };
};
ULONG LoaderFlags;
ULONG ImageFileSize;
ULONG CheckSum;
} SECTION_IMAGE_INFORMATION, * PSECTION_IMAGE_INFORMATION;

// EXTERNAL (DOCUMENTED MS WINDOWS)

#define STATUS_ACCESS_DENIED 0xC00000022

typedef struct _UNICODE_STRING
{
	USHORT Length;
	USHORT MaximumLength;
	PWSTR  Buffer;
} UNICODE_STRING, * PUNICODE_STRING;

typedef struct _OBJECT_ATTRIBUTES {
	ULONG           Length;
	HANDLE          RootDirectory;
	PUNICODE_STRING ObjectName;
	ULONG           Attributes;
	PVOID           SecurityDescriptor;
	PVOID           SecurityQualityOfService;
} OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES;

typedef LPVOID(WINAPI* FN_HEAPALLOC)(
	__in  HANDLE hHeap,
	__in  DWORD dwFlags,
	__in  SIZE_T dwBytes
	);

typedef HMODULE(WINAPI* FN_LOADLIBRARYA)(
	__in	char* lpFileName
	);

typedef HMODULE(WINAPI* FN_LOADLIBRARYW)(
	__in	LPWSTR lpFileName
	);

typedef HMODULE(WINAPI* FN_LOADLIBRARYEXA)(
	__in        char* lpFileName,
	__reserved  HANDLE hFile,
	__in        DWORD dwFlags
	);

typedef HMODULE(WINAPI* FN_LOADLIBRARYEXW)(
	__in        LPWSTR lpFileName,
	__reserved  HANDLE hFile,
	__in        DWORD dwFlags
	);

typedef LONG(NTAPI* FN_LDRLOADDLL)(
	__in PWCHAR				PathToFile,
	__in ULONG				Flags OPTIONAL,
	__in PUNICODE_STRING	ModuleFileName,
	__out PHANDLE			ModuleHandle
	);

typedef BOOL(WINAPI* FN_FREELIBRARY)(
	__in  HMODULE hModule
	);

typedef VOID(WINAPI* FN_FREELIBRARYANDEXITTHREAD)(
	__in  HMODULE hModule,
	__in  DWORD dwExitCode
	);

typedef DWORD(WINAPI* FN_CREATEPROCESSINTERNALA)(
	__in HANDLE	hToken,
	__in_opt	char* lpApplicationName,
	__inout_opt	char* lpCommandLine,
	__in_opt	LPSECURITY_ATTRIBUTES lpProcessAttributes,
	__in_opt	LPSECURITY_ATTRIBUTES lpThreadAttributes,
	__in		BOOL bInheritHandles,
	__in		DWORD dwCreationFlags,
	__in_opt	LPVOID lpEnvironment,
	__in_opt	char* lpCurrentDirectory,
	__in		LPSTARTUPINFO lpStartupInfo,
	__out		LPPROCESS_INFORMATION lpProcessInformation,
	__in		PHANDLE hNewToken
	);

typedef DWORD(WINAPI* FN_CREATEPROCESSINTERNALW)(
	__in HANDLE	hToken,
	__in_opt	LPWSTR lpApplicationName,
	__inout_opt	LPWSTR lpCommandLine,
	__in_opt	LPSECURITY_ATTRIBUTES lpProcessAttributes,
	__in_opt	LPSECURITY_ATTRIBUTES lpThreadAttributes,
	__in		BOOL bInheritHandles,
	__in		DWORD dwCreationFlags,
	__in_opt	LPVOID lpEnvironment,
	__in_opt	LPWSTR lpCurrentDirectory,
	__in		LPSTARTUPINFO lpStartupInfo,
	__out		LPPROCESS_INFORMATION lpProcessInformation,
	__in		PHANDLE hNewToken
	);

typedef FARPROC(WINAPI* FN_GETPROCADDRESS)(
	__in	HMODULE hModule,
	__in	LPCSTR lpProcName
	);

typedef HMODULE(WINAPI* FN_GETMODULEHANDLEA)(
	__in_opt	char* lpModuleName
	);

typedef HMODULE(WINAPI* FN_GETMODULEHANDLEW)(
	__in_opt	LPWSTR lpModuleName
	);

typedef BOOL(WINAPI* FN_CREATEPROCESSA)(
	__in_opt     char* lpApplicationName,
	__inout_opt  char* lpCommandLine,
	__in_opt     LPSECURITY_ATTRIBUTES lpProcessAttributes,
	__in_opt     LPSECURITY_ATTRIBUTES lpThreadAttributes,
	__in         BOOL bInheritHandles,
	__in         DWORD dwCreationFlags,
	__in_opt     LPVOID lpEnvironment,
	__in_opt     char* lpCurrentDirectory,
	__in         LPSTARTUPINFO lpStartupInfo,
	__out        LPPROCESS_INFORMATION lpProcessInformation
	);

typedef BOOL(WINAPI* FN_CREATEPROCESSW)(
	__in_opt     LPWSTR lpApplicationName,
	__inout_opt  LPWSTR lpCommandLine,
	__in_opt     LPSECURITY_ATTRIBUTES lpProcessAttributes,
	__in_opt     LPSECURITY_ATTRIBUTES lpThreadAttributes,
	__in         BOOL bInheritHandles,
	__in         DWORD dwCreationFlags,
	__in_opt     LPVOID lpEnvironment,
	__in_opt     LPWSTR lpCurrentDirectory,
	__in         LPSTARTUPINFO lpStartupInfo,
	__out        LPPROCESS_INFORMATION lpProcessInformation
	);

typedef BOOL(WINAPI* FN_VIRTUALPROTECT)(
	__in	LPVOID lpAddress,
	__in	SIZE_T dwSize,
	__in	DWORD flNewProtect,
	__out	PDWORD lpflOldProtect
	);

typedef BOOL(WINAPI* FN_VIRTUALPROTECTEX)(
	__in	HANDLE hProcess,
	__in	LPVOID lpAddress,
	__in	SIZE_T dwSize,
	__in	DWORD flNewProtect,
	__out	PDWORD lpflOldProtect
	);

typedef LONG(NTAPI* FN_NTPROTECTVIRTUALMEMORY)(
	__in HANDLE	ProcessHandle,
	__inout PVOID* BaseAddress,
	__inout PULONG	NumberOfBytesToProtect,
	__in ULONG		NewAccessProtection,
	__out PULONG	OldAccessProtection
	);

typedef LPVOID(WINAPI* FN_VIRTUALALLOC)(
	__in_opt	LPVOID lpAddress,
	__in		SIZE_T dwSize,
	__in		DWORD flAllocationType,
	__in		DWORD flProtect
	);

typedef LPVOID(WINAPI* FN_VIRTUALALLOCEX)(
	__in		HANDLE hProcess,
	__in_opt	LPVOID lpAddress,
	__in		SIZE_T dwSize,
	__in		DWORD flAllocationType,
	__in		DWORD flProtect
	);

typedef LONG(NTAPI* FN_NTALLOCATEVIRTUALMEMORY)(
	__in HANDLE		ProcessHandle,
	__inout PVOID* BaseAddress,
	__in ULONG		ZeroBits,
	__inout PULONG	RegionSize,
	__in ULONG		AllocationType,
	__in ULONG		Protect
	);

typedef BOOL(WINAPI* FN_SETPROCESSDEPPOLICY)(
	__in DWORD dwFlags
	);

typedef LONG(NTAPI* FN_NTSETINFORMATIONPROCESS)(
	__in HANDLE ProcessHandle,
	__in DWORD ProcessInformationClass,
	__in PVOID ProcessInformation,
	__in ULONG ProcessInformationLength
	);

typedef HANDLE(WINAPI* FN_CREATETHREAD)(
	__in_opt   LPSECURITY_ATTRIBUTES lpThreadAttributes,
	__in       SIZE_T dwStackSize,
	__in       LPTHREAD_START_ROUTINE lpStartAddress,
	__in_opt   LPVOID lpParameter,
	__in       DWORD dwCreationFlags,
	__out_opt  LPDWORD lpThreadId
	);

typedef HANDLE(WINAPI* FN_CREATEREMOTETHREAD)(
	__in   HANDLE hProcess,
	__in   LPSECURITY_ATTRIBUTES lpThreadAttributes,
	__in   SIZE_T dwStackSize,
	__in   LPTHREAD_START_ROUTINE lpStartAddress,
	__in   LPVOID lpParameter,
	__in   DWORD dwCreationFlags,
	__out  LPDWORD lpThreadId
	);

//typedef void* POBJECT_ATTRIBUTES;
typedef void* PCLIENT_ID;
typedef void* PINITIAL_TEB;

typedef LONG(NTAPI* FN_NTCREATETHREAD)(
	__out PHANDLE			ThreadHandle,
	__in ACCESS_MASK		DesiredAccess,
	__in_opt POBJECT_ATTRIBUTES	ObjectAttributes,
	__in HANDLE				ProcessHandle,
	__out PCLIENT_ID		ClientId,
	__in PCONTEXT			ThreadContext,
	__in PINITIAL_TEB		InitialTeb,
	__in BOOLEAN			CreateSuspended
	);

typedef LONG(NTAPI* FN_NTCREATETHREADEX)
(
	__out PHANDLE hThread,
	__in ACCESS_MASK DesiredAccess,
	__in LPVOID ObjectAttributes,
	__in HANDLE ProcessHandle,
	__in LPTHREAD_START_ROUTINE lpStartAddress,
	__in LPVOID lpParameter,
	__in BOOL CreateSuspended,
	__in ULONG StackZeroBits,
	__in ULONG SizeOfStackCommit,
	__in ULONG SizeOfStackReserve,
	__out LPVOID lpBytesBuffer
	);

typedef VOID(WINAPI* FN_EXITPROCESS)(
	__in  UINT uExitCode
	);

typedef VOID(WINAPI* FN_EXITTHREAD)(
	__in  DWORD dwExitCode
	);

typedef LONG(NTAPI* FN_NTTERMINATETHREAD)(
	__in HANDLE               ThreadHandle,
	__in LONG             ExitStatus
	);

typedef BOOLEAN(NTAPI* FN_RTLDISPATCHEXCEPTION)(
	__in PEXCEPTION_RECORD  ExceptionRecord,
	__in PCONTEXT           Context
	);